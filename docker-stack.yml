version: "3"
services:
  zoo1:
    image: zookeeper
    hostname: zoo1
    ports:
      - 2181:2181
    environment:
      ZOO_MY_ID: 1

  kafka-1:
    image: confluentinc/cp-kafka:5.0.0
    hostname: kafka-1
    depends_on:
      - zoo1
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://$HOST_IP:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_NUM_PARTITIONS: 2

  kafka-2:
    image: confluentinc/cp-kafka:5.0.0
    hostname: kafka-2
    depends_on:
      - zoo1
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://$HOST_IP:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_NUM_PARTITIONS: 2

  schema-registry:
    image: confluentinc/cp-schema-registry
    depends_on:
      - zoo1
      - kafka-1
      - kafka-2
    ports:
      - "8085:8085"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zoo1:2181
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085
      SCHEMA_REGISTRY_DEBUG: "true"

  connect-worker-0:
    image: confluentinc/cp-kafka-connect:5.3.0
    ports:
      - "8083:8083"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://doctor-kafka-connect-0:18083/healthcheck/s3-json-connector",
        ]
      interval: 1m30s
      timeout: 10s
      retries: 3
    command: bash scripts/activate-connectors.sh
    depends_on:
      - zoo1
      - kafka-1
      - kafka-2
    environment:
      AWS_ACCESS_KEY_ID: "XQN5VEB1J12S31GMNRAU"
      AWS_SECRET_ACCESS_KEY: "4u0Fn1OYJ6qRiyn86mYw3rLoTfbr9Q25pLQ3gH1Y"
      CONNECT_BOOTSTRAP_SERVERS: kafka-1:19092
      CONNECT_GROUP_ID: cp-kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: dev_cp-kafka-connect-config
      CONNECT_OFFSET_STORAGE_TOPIC: dev_cp-kafka-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: dev_cp-kafka-connect-status
      CONNECT_PLUGIN_PATH: /usr/share/java/
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_PARTITIONS: 2
      CONNECT_STATUS_STORAGE_PARTITIONS: 2
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8085
      CONNECT_REST_ADVERTISED_HOST_NAME: connect-worker-0
      CONNECT_REST_ADVERTISED_PORT: 8083
      CONNECT_REST_PORT: 8083
    volumes:
      - ./scripts:/scripts
      - ./connector-config:/connector-config

  doctor-kafka-connect-0:
    image: jahnestacado/doctor-kafka-connect:1.0.0
    ports:
      - "18083:18083"
    environment:
      LOG_LEVEL: DEBUG
      KAFKA_CONNECT_HOSTNAME: connect-worker-0
      KAFKA_CONNECT_PORT: 8083
      HEALTHCHECK_PORT: 18083
      KAFKA_CONNECT_TARGET_WORKER_IDS: connect-worker-0:8083

  connect-worker-1:
    image: confluentinc/cp-kafka-connect:5.3.0
    ports:
      - "8089:8089"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://doctor-kafka-connect-1:18084/healthcheck/s3-json-connector",
        ]
      interval: 3m30s
      timeout: 10s
      retries: 3
    depends_on:
      - zoo1
      - kafka-1
      - kafka-2
    environment:
      AWS_ACCESS_KEY_ID: "XQN5VEB1J12S31GMNRAU"
      AWS_SECRET_ACCESS_KEY: "4u0Fn1OYJ6qRiyn86mYw3rLoTfbr9Q25pLQ3gH1Y"
      CONNECT_BOOTSTRAP_SERVERS: kafka-1:19092
      CONNECT_GROUP_ID: cp-kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: dev_cp-kafka-connect-config
      CONNECT_OFFSET_STORAGE_TOPIC: dev_cp-kafka-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: dev_cp-kafka-connect-status
      CONNECT_PLUGIN_PATH: /usr/share/java/
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_PARTITIONS: 2
      CONNECT_STATUS_STORAGE_PARTITIONS: 2
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8085
      CONNECT_REST_ADVERTISED_HOST_NAME: connect-worker-1
      CONNECT_REST_ADVERTISED_PORT: 8084
      CONNECT_REST_PORT: 8084

  doctor-kafka-connect-1:
    image: jahnestacado/doctor-kafka-connect:1.0.0
    ports:
      - "18084:18084"
    environment:
      LOG_LEVEL: DEBUG
      KAFKA_CONNECT_HOSTNAME: connect-worker-1
      KAFKA_CONNECT_PORT: 8084
      HEALTHCHECK_PORT: 18084
      KAFKA_CONNECT_TARGET_WORKER_IDS: connect-worker-1:8084
